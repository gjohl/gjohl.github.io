---
title: "React: JavaScript Essentials"
description: "React Complete Guide: Section 2"
date: "2024-03-20"
image: "../react.png"
categories: [Engineering, Software, React, WebDev]
# draft: true
---

# Javascript Refresher

Adding JS to a page in script tags. 
Either in the body of the script tag, or preferably as a separate js file that’s then called as the src parameter of the script tag. 
The defer parameter means the script won’t be called until the rest of the body is loaded. 
The type=module parameter means the JavaScript file will be treated as a module. 


React projects use a build process.  
JSX is not natively supported by the browser, so a build tool transforms it to regular JavaScript. It also minifies the project to optimise the size and loading times. 


## Imports and Exports
We need to use the export keyword to make a function or variable available outside of that file. Each file can have at most one default export. 

The import keyword then lets us use this. 
Curly braces unless it is a default export. If it is a default export you assign your own name to the imported variable. 
Path is in single or double quotes with the file extension in plain JS. In react, some build tools automatically populate the file extension so you don’t need it. 

We can group the imports if there are many using starred imports. 
import * as utils from “./utils.js”;

We can also alias individual imported variables with the as keyword. 


## Variables
string, number, boolean, null, undefined

object, array

Variables are defined with the `let` keyword. Camel case is most common in JS. 
Constants are defined with the `const` keyword. They cannot be reassigned. Prefer const where it is appropriate to be clear about your intentions that this should not be reassigned. 

Older versions of JavaScript did not make this distinction and used `var` in all cases. This is discouraged.

## Operators
Add, subtract, divide, multiply. 
Work on numbers or strings or other types. 
Triple equality 


## Functions
Defining functions- regular syntax and arrow syntax. 
```
function sum(a, b) {
    return a + b;
}
```

or as an arrow function
```
const sum = (a,b) => {a + b};
```

Invoking functions. 
Default values. 

Arrow function syntax shortcuts. See article 20. 

Functions can be passed as props to other functions. This is helpful when defining components which we want to pass state setters or other handler functions to (functional components are just ultimately functions themselves).

We can also *define* functions inside of other functions.
This is helpful when we want the function to be scoped only to the outer function, not defined globally. 

This is again used a lot in React since we may want to define functions with our (functional) components.


## Objects
Objects are key value pairs. The value for a given key can be accessed with .
obj.key1

Objects can also have methods. These are functions defined inside the object. 
const obj = {
    name: “Gurp”,
    method1: greet() {return “Hello “ + this.name}
}
obj.greet()

Class instances are essentially objects like above. If we want to create a reusable class, we can formally define a class. See image for code example. 

```
class User (
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    greet() {
        return “Hello “ + this.name;
    }
)

const user1 = new User("Gurp", 30);
```

Objects (and, by extension, arrays) are passed by reference. So when we modify the object, it does not create a new object, it mutates the original. The *memory address* is stored as a constant, not the *value*. So if we create an object as a const, we can modify it without reassigning it.


## Arrays
Arrays are technically a type of object.

```
const array1 = [1, 2, 3, 4];
```

There are some built in utility methods of arrays:

- `push`: Add a new item to the end of the array.
    - `array1.push(5);`
    - [push docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)
- `map`: Transform each item in the array.
    - `const squares = array1.map((item) => item * 2);`
    - [map docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
- `find`: Returns the first element in the array that satisfies the condition. If no values satisfy the condition, undefined is returned.
    - `const found = array1.find((element) => element > 3);`
    - [find docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
- `findIndex: Returns the *index* of the first element in the array that satisfies the condition. If no values satisfy the condition, -1 is returned.
    - `arr.findIndex( (item) => item===2)`
    - [findIndex docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)
- `filter`: Return an array of items which match the condition.
    - `const result = array1.filter((item) => item > 2);`
    - [filter docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
- `reduce`: Apply the given function to each element, in order. The result of each iteration is passed as the currentValue of the next iteration to accumulate the result.
    - `const summedArray = array1.reduce((accumulator, currentValue) => accumulator + currentValue);`
    - [reduce docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)
- `concat`: merge two or more arrays.
    - `const array3 = array1.concat(array2);`
    - [concat docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)
- `slice`: Return a slice of the array between the given indices (not including the end index)
    - `array1.slice(1,3)  // returns [2, 3]`
    - [slice docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)
- `splice`: Remove, replace or insert items to an array **in-place**; the original array is modified.
    - `months.splice(4, 1, 'May');  // Replaces 1 element at index 4`
    - [splice docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)


## Destructuring
Array destructuring
const [firstName, lastName] = ["Gurp", "Johl"]
instead of 
```
const nameArray = ["Gurp", "Johl"]
const firstName = nameArray[0]
const lastName =  nameArray[1]
```

Similiarly, we can destructure objects too. We can also alias the keys with a `:`, as in the example below where the `name` key is aliased to `userName`.
```
const {name: userName, age} = {name: 'Gurp', age: 30}
```
instead of
```
const userObj = {name: 'Gurp', age: 30}
const userName = userObj.name
const age = userObj.age
```


## Spread Operator

The spread operator pulls out values of arrays and objects. THis is useful for merging multiple arrays, e.g.

```
const arrayA = [1, 2, 3]
const arrayB = [4, 5, 6]
const mergedArray = [...arrayA, ...arrayB]
```

The same applies to merging objects.


## Control Structures

if-else
```
if userName === "Gurp" {
    // Do something
} else {
    // Do something else
}
```

for loop

```
const hobbies = ["Sports", "Music"];

for (const hobby of hobbies) {
    console.log(hobby);
}
```

