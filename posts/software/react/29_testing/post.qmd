---
title: "React: TypeScript Essentials"
description: "React Complete Guide: Section 29"
date: "2024-03-20"
image: "../react.png"
categories: [Engineering, Software, React, WebDev]
draft: true
---

# Testing in React

Types of tests: unit, integration, end to end. 

We need some build tools to help us run tests. 
Jest is a testing framework that allows us to run tests. 
The test function creates a unit test. It takes a name of the test and an anonymous function which runs the test code. 
The expect function then defines some behaviour to assert. For pure JavaScript util functions, this is all we need. 
For React components, we need to test the rendered component as below. 

React testing library is a library that lets us simulate rendered components and assert characteristics of them. 
The render function is used to simulate the dom to render a component in a test. The screen function is used to get properties from the simulated dom, eg screen.getByText to assert a particular passage of text appears on the screen.


Getting elements from the DOM to test.
The get functions return an error if the object does not exist. The query functions return null instead. The latter is useful if we want to test when something should NOT be rendered. 

The getByRole function is useful to pick out specific elements. See available roles here: https://www.w3.org/TR/html-aria/#docconformance


The 3 As of testing:
Arrange, Act, Assert. 
Arrange: render the component. 
Act: any user events if applicable for the test. 
Assert: check the desired output is in the DOM. 

Test suites. 
We may want to group tests for related features/components together for readability. 
Use the describe function to define a test suite. It also takes a test suite description string and anonymous function as an argument. Then each of the tests are defined within it. 


Testing user interactivity and state. 
The userEvent object from testing library simulates user actions like click or hover. 


Testing asynchronous code.
The findByRole function, and related "find" functions, return a promise which will wait and re-attempt to find the element before failing. This is useful for testing async code. You can pass optional args to the find functions to set how long they should wait, when to retry etc.

We generally want to avoid sending external requests as part of unit tests, so this is more relevant to integration or end-to-end tests.

For unit tests, we can mock the results.


Using mocks.
We want to mock out external calls like fetch. We can overwrite the `window.getch` method like:

```
window.fetch = jest.fn();
window.fetch.mockResolvedValueOnce({
    json: async() => {
        // The mock values
        [{id: 1, text: 'example text goes here'}] 
}
});
```


References.
https://jestjs.io/
https://testing-library.com/docs/react-testing-library/intro/
For custom hooks: https://github.com/testing-library/react-hooks-testing-library
